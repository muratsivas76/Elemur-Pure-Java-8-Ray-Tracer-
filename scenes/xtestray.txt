# ===================================================
# SOME NEW TESTS - SCENE
# ===================================================

# Camera settings
Camera mainCamera {
    position = P(0.0, 1.0, 5.0);
    lookAt = P(0.0, 0.5, 0.0);
    upVector = V(0.0, 1.0, 0.0);
    fov = 60.0;
    orthographic = false;
    maxRecursionDepth = 3;
    reflective = true;
    refractive = true;
    shadowsEnabled = true;
}

# Renderer Settings
Renderer Settings {
    width = 800;
    height = 600;
    backgroundColor = #1A3A5A;  // koyu gökyüzü mavisi
    shadowColor = #000000;
}

# Lighting
ElenaMuratAmbientLight ambientLight {
    color = #FFFFFF;
    intensity = 0.8;       
}

MuratPointLight keyLight {
    position = P(3.0, 5.0, 4.0);  
    color = #FFFFFF;
    intensity = 1.3;       
}

MuratPointLight fillLight {
    position = P(-3.0, 4.0, 3.0); 
    color = #FFF5E1;
    intensity = 0.5;      
}

MuratPointLight rimLight {
    position = P(0.0, 2.0, -2.0);
    color = #88CCFF;
    intensity = 0.7;
}

# Materials

# CheckerboardMaterial(Color color1, Color color2, double size, double ambientCoeff, double diffuseCoeff, double specularCoeff, double shininess, Color specularColor, double reflectivity, double ior, double transparency, Matrix4 objectInverseTransform)
CheckerboardMaterial floorMat {
    color1 = #CCCCCC;
    color2 = #444444;
    size = 1.5;
    ambientCoeff = 0.15;
    diffuseCoeff = 0.6;
    specularCoeff = 0.3;
    shininess = 20.0;
    specularColor = #FFFFFF;
    reflectivity = 0.15;
    ior = 1.0;
    transparency = 0.0;
}

# ThresholdMaterial(Color baseColor, double threshold, Color aboveColor, Color belowColor, boolean useLightColor, boolean invertThreshold)
ThresholdMaterial threshold {
    baseColor = #FF444433;        
    aboveColor = #334400;    
    belowColor = #0000DD;   
    threshold = 0.5;
    useLightColor = false;
    invertThreshold = false;  
}

# BrightnessMaterial(Color baseColor, double brightness, boolean useLightColor)
BrightnessMaterial bright {
	baseColor = #FF000011;
	brightness = 0.75;
	useLightColor = false;
}

# ContrastMaterial(Color baseColor, double contrast, boolean useLightColor)
ContrastMaterial contrast {
	baseColor = #0000CC25;
	contrast = 0.99;
	useLightColor = false;
}


// SphereWordTextureMaterial(String word, Color textColor, Color gradientColor, String gradientType, Color bgColor, 
//                           String fontFamily, int fontStyle, int fontSize, 
//                           double reflectivity, double ior, double transparency, 
//                           int uOffset, int vOffset, BufferedImage imageObject, 
//                           int imageWidth, int imageHeight, int imageUOffset, int imageVOffset)
// Info: 1.0->transparent; 0.0->opaque
// AE: Æ; O/: Ø; A0: Å; ae: æ; o/: ø; a0: å
// gradientType: "horizontal", "vertical", "diagonal"
SphereWordTextureMaterial sphereWordNO {
    word = "BRO/D"; 
    bgColor = #00000000;
    textColor = #0000FFFF;
    gradientColor = #FF0000ff; 
    gradientType = "diagonal"; 
    fontFamily = Arial_black; //Arial_black
    fontStyle = 1;
    fontSize = 70;
    uOffset = 40;
    vOffset = 5;
    reflectivity = 0.25;
    ior = 1.0;
	transparency = 0.15;
    imageObject = "textures\bread.png"; //or "null"
    imageWidth = 256; 
    imageHeight = 256;
    imageUOffset = 40;
    imageVOffset = 0;
}

SphereWordTextureMaterial sphereWordTR {
    word = "EKMEK"; 
    bgColor = #00000000;
    textColor = #FF0000FF;
    gradientColor = #00FF00FF; 
    gradientType = "diagonal"; 
    fontFamily = Arial_black; //Arial_black
    fontStyle = 1;
    fontSize = 70;
    uOffset = -40;
    vOffset = 5;
    reflectivity = 0.25;
    ior = 1.0;
	transparency = 0.15;
    imageObject = "textures\bread.png"; //or "null"
    imageWidth = 256; 
    imageHeight = 256;
    imageUOffset = -40;
    imageVOffset = 0;
}

# MosaicMaterial(Color baseColor, Color tileColor, double tileSize, double groutWidth, double randomness)
MosaicMaterial mosaic {
	baseColor = #FF0000;
	tileColor = #00DD00;
	tileSize = 0.1;
	groutWidth = 0.05;
	randomness = 0.2;
}

# CrystalMaterial(Color baseColor, Color crystalColor, double rayDensity, double raySharpness)
CrystalMaterial crystal {
	baseColor = #ff0000;
	crystalColor = #00dc00;
	rayDensity = 2.0;
	raySharpness = 0.2;
}

# CrystalClearMaterial(Color glassTint, double clarity, double ior, double dispersion, Matrix4 objectInverseTransform)
CrystalClearMaterial crystal2 {
    glassTint = #FF3333;
    clarity = 0.50;
    ior = 1.52;
    dispersion = 0.002;
}

PolkaDotMaterial(Color baseColor, Color dotColor, double dotSize, double dotSpacing)
PolkaDotMaterial polka {
	baseColor = #ff0000ff;
	dotColor = #0000FF55;
	dotSize = 0.2;
	dotSpacing = 0.3;
} 

SolidColorMaterial test {
	color = #FF0000;
}

SolidColorMaterial test2 {
	color = #00dd00;
}

# XRayMaterial()
XRayMaterial xray {
}

# XRayMaterial(Color baseColor, double transparency, double reflectivity)
XRayMaterial xray2 {
	baseColor = 0.0f, 0.0f, 1.0f, 0.6f;
	transparency = 0.15;
	reflectivity = 0.15;
}

# AmberMaterial()
AmberMaterial amber {
}

OrbitalMaterial(Color centerColor, Color orbitColor, double ringWidth, int ringCount)
OrbitalMaterial orbit {
    centerColor = #FFD700;    // Altın sarısı
    orbitColor = #800080;     // Kraliyet moru
    ringWidth = 0.12;
    ringCount = 5;
}

LambertMaterial lambertMat {
    color = #000000;          // Siyah
}

// Çıkan etki: Lüks ve ihtişam hissi

# MultiMixMaterial(Material[] materials, double[] ratios)
MultiMixMaterial mixed {
	materials = [lambertMat, orbit];
	ratios = [0.65, 0.35];  //total must be 1.0
}

# GEOMETRIES

# Arka duvar
Plane backWallShape {
    pointOnPlane = P(0.0, 0.0, -5.0);
    normal = V(0.0, 0.0, 1.0);
	//material = lambertMat;
	//material = orbit; //original
	//material = mixed;
	//material = amber;
	material = xray2;
}

# Zemin
Plane floorShape {
    pointOnPlane = P(0.0, -1.0, 0.0);
    normal = V(0.0, 1.0, 0.0);
    material = floorMat;  // Checkerboard zemin klasik ve temiz
	//material = mosaic;
	//material = orbit;
}

Sphere sphere1 {
    radius = 1.4;
    transform = translate(-1.5, 0.7, 0.0);
    //material = threshold;
	//material = bright;
	//material = contrast;
	//material = test;
	material = sphereWordNO; //original - Norveççe "BROD" yazılı
	//material = crystal;
	//material = polka;
	//material = test2;
}

Sphere sphere2 {
    radius = 1.4;
    transform = translate(1.5, 0.7, 0.0);
    //material = threshold;
	//material = bright;
	//material = contrast;
	//material = test;
	material = sphereWordTR; //original - Türkçe "EKMEK" yazılı
	//material = crystal;
	//material = polka;
	//material = amber;
}

# Ekstra küre - ortada amber efekti için
Sphere sphere3 {
    radius = 0.5;
    transform = translate(0.0, 1.8, 0.0);
    material = amber;  // Ortada güzel bir amber küre
}

Sphere keyLightSphere {
    radius = 1.2;
    transform = translate(3.0, 5.5, 4.0);
    material = test;  // Kırmızı - ana ışık
}

Sphere fillLightSphere {
    radius = 1.2;
    transform = translate(-3.0, 5.5, 3.0);
    material = test2; // Yeşil - dolgu ışığı
}
